// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package cmd_mocks

import (
	testing "testing"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// ProcessState is an autogenerated mock type for the ProcessState type
type ProcessState struct {
	mock.Mock
}

// ExitCode provides a mock function with given fields:
func (_m *ProcessState) ExitCode() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Exited provides a mock function with given fields:
func (_m *ProcessState) Exited() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Pid provides a mock function with given fields:
func (_m *ProcessState) Pid() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Success provides a mock function with given fields:
func (_m *ProcessState) Success() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Sys provides a mock function with given fields:
func (_m *ProcessState) Sys() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// SysUsage provides a mock function with given fields:
func (_m *ProcessState) SysUsage() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// SystemTime provides a mock function with given fields:
func (_m *ProcessState) SystemTime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// UserTime provides a mock function with given fields:
func (_m *ProcessState) UserTime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// NewProcessState creates a new instance of ProcessState. It also registers a cleanup function to assert the mocks expectations.
func NewProcessState(t testing.TB) *ProcessState {
	mock := &ProcessState{}

	t.Cleanup(func() {
		t.Helper()
		mock.AssertExpectations(t)
	})

	return mock
}
