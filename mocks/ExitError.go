// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package cmd_mocks

import (
	testing "testing"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// ExitError is an autogenerated mock type for the ExitError type
type ExitError struct {
	mock.Mock
}

// Error provides a mock function with given fields:
func (_m *ExitError) Error() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExitCode provides a mock function with given fields:
func (_m *ExitError) ExitCode() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Exited provides a mock function with given fields:
func (_m *ExitError) Exited() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Pid provides a mock function with given fields:
func (_m *ExitError) Pid() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Stderr provides a mock function with given fields:
func (_m *ExitError) Stderr() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Success provides a mock function with given fields:
func (_m *ExitError) Success() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Sys provides a mock function with given fields:
func (_m *ExitError) Sys() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// SysUsage provides a mock function with given fields:
func (_m *ExitError) SysUsage() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// SystemTime provides a mock function with given fields:
func (_m *ExitError) SystemTime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// UserTime provides a mock function with given fields:
func (_m *ExitError) UserTime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// NewExitError creates a new instance of ExitError. It also registers a cleanup function to assert the mocks expectations.
func NewExitError(t testing.TB) *ExitError {
	mock := &ExitError{}

	t.Cleanup(func() {
		t.Helper()
		mock.AssertExpectations(t)
	})

	return mock
}
