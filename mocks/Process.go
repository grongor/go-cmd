// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package cmd_mocks

import (
	cmd "github.com/grongor/go-cmd"
	mock "github.com/stretchr/testify/mock"

	os "os"

	testing "testing"
)

// Process is an autogenerated mock type for the Process type
type Process struct {
	mock.Mock
}

// Kill provides a mock function with given fields:
func (_m *Process) Kill() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Release provides a mock function with given fields:
func (_m *Process) Release() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Signal provides a mock function with given fields: sig
func (_m *Process) Signal(sig os.Signal) error {
	ret := _m.Called(sig)

	var r0 error
	if rf, ok := ret.Get(0).(func(os.Signal) error); ok {
		r0 = rf(sig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wait provides a mock function with given fields:
func (_m *Process) Wait() (cmd.ProcessState, error) {
	ret := _m.Called()

	var r0 cmd.ProcessState
	if rf, ok := ret.Get(0).(func() cmd.ProcessState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cmd.ProcessState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProcess creates a new instance of Process. It also registers a cleanup function to assert the mocks expectations.
func NewProcess(t testing.TB) *Process {
	mock := &Process{}

	t.Cleanup(func() {
		t.Helper()
		mock.AssertExpectations(t)
	})

	return mock
}
