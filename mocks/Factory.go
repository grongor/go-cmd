// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package cmd_mocks

import (
	context "context"

	cmd "github.com/grongor/go-cmd"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

// Command provides a mock function with given fields: name, args
func (_m *Factory) Command(name string, args ...string) cmd.Command {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 cmd.Command
	if rf, ok := ret.Get(0).(func(string, ...string) cmd.Command); ok {
		r0 = rf(name, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cmd.Command)
		}
	}

	return r0
}

// CommandContext provides a mock function with given fields: ctx, name, args
func (_m *Factory) CommandContext(ctx context.Context, name string, args ...string) cmd.Command {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 cmd.Command
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) cmd.Command); ok {
		r0 = rf(ctx, name, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cmd.Command)
		}
	}

	return r0
}

// LookPath provides a mock function with given fields: file
func (_m *Factory) LookPath(file string) (string, error) {
	ret := _m.Called(file)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFactory creates a new instance of Factory. It also registers a cleanup function to assert the mocks expectations.
func NewFactory(t testing.TB) *Factory {
	mock := &Factory{}

	t.Cleanup(func() {
		t.Helper()
		mock.AssertExpectations(t)
	})

	return mock
}
